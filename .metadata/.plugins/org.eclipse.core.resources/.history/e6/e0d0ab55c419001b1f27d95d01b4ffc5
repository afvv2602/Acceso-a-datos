package Ejercicio_Alumno;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;

class Fichero {

	private String ruta;
	HashMap<String, Alumno> HMAlumnos = new HashMap<String, Alumno>();

	public Fichero(String ruta) {
		this.ruta = ruta;
	}

	public void insertaLinea(Alumno alumno) {
		File fichero = new File(this.ruta);
		String linea = alumno.getDNI() + "#" + alumno.getNombre() + "#" + alumno.getApellidos() + "#" + alumno.getEdad()
				+ "#" + alumno.getModulo();
		BufferedWriter buffWriter = null;
		try {
			buffWriter = new BufferedWriter(new FileWriter(fichero, true)); // true para que no machaque el fichero
			buffWriter.write(linea); // insertamos la linea
			buffWriter.newLine(); // creamos una linea debajo para que haga el salto de linea
			buffWriter.close(); // cerramos el fichero
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (buffWriter != null)
					buffWriter.close(); // cerramos el fichero
			} catch (IOException ex) {
				System.out.println(ex.getMessage());
			}
		}
	}

	public void BorrarLinea(String busqueda, int posicion, String separador) {
		File outputFile = null;
		File inputFile = null;
		try {
			inputFile = new File(this.ruta);
			outputFile = new File("./BDAlumnos_DespuesDeBorrar");
			outputFile.createNewFile();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
		BufferedReader reader = null;
		BufferedWriter writer = null;
		try {
			reader = new BufferedReader(new FileReader(inputFile));
			writer = new BufferedWriter(new FileWriter(outputFile));
			String linea = null;
			while ((linea = reader.readLine()) != null) {
				String[] datosAlumnos = linea.split(separador);
				String DNIactual = datosAlumnos[posicion];
				if (DNIactual.trim().equals(busqueda)) {
					continue;
				}
				writer.write(linea + System.getProperty("line.separator"));
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (reader != null && writer != null) {
					reader.close();
					writer.close();
					moveFile(outputFile.getAbsolutePath(), inputFile.getAbsolutePath());
				}

			} catch (IOException ex) {
				System.out.println(ex.getMessage());
			}

		}

	}

	public void moveFile(String fromFile, String toFile) {

		File origin = new File(fromFile);
		File destination = new File(toFile);
		if (origin.exists()) {
			BufferedReader reader = null;
			BufferedWriter writer = null;
			try {
				reader = new BufferedReader(new FileReader(origin));
				writer = new BufferedWriter(new FileWriter(destination));
				String linea = null;
				while ((linea = reader.readLine()) != null) {
					writer.write(linea); // insertamos la linea
					writer.newLine(); // creamos una linea debajo para que haga el salto de linea
				}
				reader.close();
				writer.close();
				origin.delete();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}

	}

	public ArrayList<String> dameContenido() {
		ArrayList<String> Alumnos = new ArrayList<String>();
		File fichero = new File(this.ruta);
		BufferedReader buffReader = null;
		try {
			buffReader = new BufferedReader(new FileReader(fichero)); // creamos fichero de lectura
			String linea;
			while ((linea = buffReader.readLine()) != null) {
				Alumnos.add(linea); // Añadimos el alumno al fichero
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (buffReader != null)
					buffReader.close();
			} catch (IOException ex) {
				System.out.println(ex.getMessage());
			}

		}
		return Alumnos; // devolvemos el arraylist
	}

	public HashMap<String, Alumno> crearHM() {

		ArrayList<String> alumnos = dameContenido();
		for (String cadenaAlumnos : alumnos) {
			String[] datosAlumnos = cadenaAlumnos.split("#");
			String DNI = datosAlumnos[0];
			String Nombre = datosAlumnos[1];
			String Apellidos = datosAlumnos[2];
			String edad = datosAlumnos[3];
			String Modulo = datosAlumnos[4];
			int Edad = Integer.parseInt(edad);
			Alumno Alumno = new Alumno(Nombre, Edad, DNI, Apellidos, Modulo);
			HMAlumnos.put(DNI, Alumno);

		}

		return HMAlumnos;
	}

	public void volcarMap(HashMap<String, Alumno> alumnos) {
		
		File origin = new File(this.ruta);
		if (origin.exists()) {
			BufferedReader reader = null;
			BufferedWriter writer = null;
			try {
				reader = new BufferedReader(new FileReader(origin));
				writer = new BufferedWriter(new FileWriter(destination));
				String linea = null;
				while ((linea = reader.readLine()) != null) {
					writer.write(linea); // insertamos la linea
					writer.newLine(); // creamos una linea debajo para que haga el salto de linea
				}
				reader.close();
				writer.close();
				origin.delete();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
		
	}


}